"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pack = void 0;
const coda = __importStar(require("@codahq/packs-sdk"));
exports.pack = coda.newPack();
exports.pack.addFormula({
    name: 'Hello',
    description: '',
    resultType: coda.ValueType.String,
    parameters: [coda.makeParameter({ name: 'value', description: '', type: coda.ParameterType.String })],
    async execute([value]) {
        return `Hello ${value}`;
    },
});
// pack.addFormula({
//   name: 'BooleanToggle',
//   description: '',
//   resultType: coda.ValueType.Boolean,
//   codaType: coda.ValueHintType.Toggle,
//   parameters: [coda.makeParameter({name: 'value', description: '', type: coda.ParameterType.Boolean})],
//   async execute([value]) {
//     return value;
//   },
// });
// pack.addFormula({
//   name: 'ObjectWithBoolean',
//   description: '',
//   resultType: coda.ValueType.Object,
//   parameters: [],
//   schema: coda.makeObjectSchema({
//     idProperty: 'foo',
//     displayProperty: 'foo',
//     properties: {
//       foo: {type: coda.ValueType.String},
//       bar: {type: coda.ValueType.Boolean, codaType: coda.ValueHintType.Toggle},
//     },
//   }),
//   async execute() {
//     return {foo: 'hello toggle', bar: true};
//   },
// });
// pack.addColumnFormat({
//   name: 'BooleanFormat',
//   formulaName: 'BooleanToggle',
// });
// const MySchema = coda.makeObjectSchema({
//   properties: {
//     property1: {type: coda.ValueType.String},
//     property2: {type: coda.ValueType.Boolean, codaType: coda.ValueHintType.Toggle},
//     property3: {type: coda.ValueType.Boolean},
//   },
//   displayProperty: 'property1', // Which property above to display by default.
//   idProperty: 'property2', // Which property above is a unique ID.
// });
// pack.addSyncTable({
//   name: 'SyncWithBoolean',
//   description: '',
//   identityName: 'BooleanIdentity',
//   schema: MySchema,
//   formula: {
//     name: 'SyncWithBoolean',
//     description: '',
//     parameters: [],
//     async execute([]) {
//       return {
//         result: [{property1: 'hello2', property2: true, property3: true}],
//       };
//     },
//   },
// });
